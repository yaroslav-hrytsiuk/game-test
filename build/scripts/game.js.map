{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/index.js",
    "src/states/GameMainMenu.js",
    "src/states/GameOver.js",
    "src/states/GamePlayGame.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "import GameMainMenu from 'states/GameMainMenu';\n\n\nclass Game extends Phaser.Game {\n\n\tconstructor() {\n\t\tsuper(800, 950, Phaser.CANVAS, 'content', null);\n\t\tthis.state.add('MainMenu', GameMainMenu, false);\n\t\tthis.state.start('MainMenu');\n\t}\n}\n\n\nnew Game();\n",
    "import GamePlayGame from 'states/GamePlayGame';\n\nclass GameMainMenu extends Phaser.State {\n    preload() {\n        this.load.image('background', '../test/images/backgrounds/background.jpg')\n        this.load.image('donut', '../test/images/donut-main.png');\n        this.load.image('logo', '../test/images/donuts_logo.png');\n        this.load.image('button', '../test/images/btn-play.png');\n        this.load.spritesheet('sfx', '../test/images/btn-sfx.png', 143, 140);\n    }\n    create() {\n        this.add.sprite(0, 0, 'background');\n        this.add.sprite(100, 20, 'logo');\n        this.state.add('PlayGame', GamePlayGame, false);\n        \n        let donutImage = this.add.sprite(this.world.centerX, this.world.centerY, 'donut');\n        donutImage.scale.setTo(0.8, 0.8);\n        donutImage.anchor.set(0.5, 0.5);\n\n        let btnStart = this.add.button(this.world.centerX, this.world.centerY + 350, 'button', this.clickPlay, this);\n        btnStart.anchor.set(0.5, 0.5);\n\n        let btnSfx = this.add.button(this.world.centerX - 300, this.world.centerY + 380, 'sfx', this.clickSfx, this, 0, 0, 1);\n        btnSfx.anchor.set(0.5, 0.5);\n    }\n\n    clickPlay() {\n        this.state.start('PlayGame');\n    }\n\n    clickSfx() {\n\n    }\n    update() {\n\n    }\n}\n\nexport default GameMainMenu;\n",
    "\r\nclass GameOver extends Phaser.Text {\r\n\r\n    preload() {\r\n        this.load.image('gameOver', '../test/images/timeup.png');\r\n    }\r\n    create() {\r\n        this.add.sprite(0, 0, 'background');\r\n        this.add.sprite(175, 100, 'gameOver');\r\n        let btnStart = this.add.button(this.world.centerX, this.world.centerY + 350, 'button', this.clickPlay, this);\r\n        btnStart.anchor.set(0.5, 0.5);\r\n    }\r\n    clickPlay() {\r\n        this.state.start('MainMenu');\r\n    }\r\n}\r\n\r\nexport default GameOver;",
    "import GameOver from 'states/GameOver';\r\n\r\nclass GamePlayGame extends Phaser.State {\r\n    preload() {\r\n        const donutSize = 92;\r\n        this.load.spritesheet('donuts', '../test/images/game/gems-main.png', donutSize, donutSize);\r\n        this.load.image('score', '../test/images/bg-score.png');\r\n        this.load.image('hand', '../test/images/game/hand.png');\r\n\r\n    }\r\n    create() {\r\n        const donutSize = 92,\r\n            fieldSize = 7,\r\n            donutColors = 6,\r\n            swapSpeed = 200,\r\n            fallSpeed = 200,\r\n            destroySpeed = 200,\r\n            fastFall = true,\r\n            _this = this,\r\n            moveX = 75,\r\n            moveY = 250;\r\n\r\n        let gameArray = [],\r\n            removeMap = [],\r\n            donutGroup,\r\n            selectedDonut,\r\n            canPick = true,\r\n            hand,\r\n            count = 0,\r\n            handTween;\r\n        this.add.sprite(0, 0, 'background');\r\n        this.add.sprite(350, 10, 'score');\r\n        this.state.add('GameOver', GameOver, false);\r\n\r\n        //Creating timer\r\n        this.startTime = new Date();\r\n        this.totalTime = 70;\r\n        this.timeElapsed = 0;\r\n        this.createTimer();\r\n        this.gameTimer = _this.time.events.loop(100, function () {\r\n            _this.updateTimer();\r\n        })\r\n\r\n        //Creating score counter\r\n        let score = 0;\r\n        let scoreText = this.add.text(610, 110, '0', { font: '48px Fredoka One', fill: '#fff' });\r\n        scoreText.anchor.setTo(0.5);\r\n\r\n        function collectScore(arg) {\r\n            score += arg * 10;\r\n            scoreText.text = score;\r\n        }\r\n\r\n        function createField() {\r\n            donutGroup = _this.add.group();\r\n            donutGroup.position.x = moveX;\r\n            donutGroup.position.y = moveY;\r\n            for (let i = 0; i < fieldSize; i++) {\r\n                gameArray[i] = [];\r\n                for (let j = 0; j < fieldSize; j++) {\r\n                    let donut = _this.add.sprite(donutSize * j + donutSize / 2, donutSize * i + donutSize / 2, 'donuts');\r\n                    donut.anchor.set(0.5);\r\n                    donutGroup.add(donut);\r\n                    do {\r\n                        let randomColor = _this.rnd.between(0, donutColors - 1);\r\n                        donut.frame = randomColor;\r\n                        gameArray[i][j] = {\r\n                            donutColor: randomColor,\r\n                            donutSprite: donut\r\n                        }\r\n                    } while (isMatch(i, j));\r\n                }\r\n            }\r\n            selectedDonut = null;\r\n            hand = _this.add.sprite(0, 0, 'hand');\r\n            hand.anchor.set(0.5);\r\n            hand.visible = false;\r\n        }\r\n\r\n        function showHint() {\r\n            let matchFound = false;\r\n            for (let i = 0; i < fieldSize - 1; i++) {\r\n                for (let j = 0; j < fieldSize - 1; j++) {\r\n                    tmpSwap(i, j, i + 1, j);\r\n                    if (matchInBoard()) {\r\n                        hand.visible = true;\r\n                        hand.x = gameArray[i + 1][j].donutSprite.x + 16 + moveX;\r\n                        hand.y = gameArray[i + 1][j].donutSprite.y + 70 + moveY;\r\n                        handTween = _this.add.tween(hand).to({\r\n                            y: hand.y + 100\r\n                        }, 500, Phaser.Easing.Linear.None, true, 0, -1, true);\r\n                        matchFound = true;\r\n                    }\r\n                    tmpSwap(i, j, i + 1, j);\r\n                    if (matchFound) {\r\n                        return;\r\n                    }\r\n                    tmpSwap(i, j, i, j + 1);\r\n                    if (matchInBoard()) {\r\n                        hand.visible = true;\r\n                        hand.x = gameArray[i][j + 1].donutSprite.x + 16 + moveX;\r\n                        hand.y = gameArray[i][j + 1].donutSprite.y + 70 + moveY;\r\n                        handTween = _this.add.tween(hand).to({\r\n                            x: hand.x + 100\r\n                        }, 500, Phaser.Easing.Linear.None, true, 0, -1, true);\r\n                        matchFound = true;\r\n                    }\r\n                    tmpSwap(i, j, i, j + 1);\r\n                    if (matchFound) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function tmpSwap(row1, col1, row2, col2) {\r\n            let tmp = gameArray[row1][col1];\r\n            gameArray[row1][col1] = gameArray[row2][col2];\r\n            gameArray[row2][col2] = tmp;\r\n        }\r\n\r\n        function donutSelect(e) {\r\n            if (canPick) {\r\n                hand.visible = false;\r\n                handTween.stop();\r\n                let row = Math.floor((e.worldY - moveY) / donutSize),\r\n                    col = Math.floor((e.worldX - moveX) / donutSize),\r\n                    pickedDonut = gemAt(row, col);\r\n                if (pickedDonut != -1) {\r\n                    if (selectedDonut == null) {\r\n                        pickedDonut.donutSprite.scale.setTo(1.2);\r\n                        pickedDonut.donutSprite.bringToTop();\r\n                        selectedDonut = pickedDonut;\r\n                        _this.input.addMoveCallback(donutMove);\r\n                    }\r\n                    else {\r\n                        if (areTheSame(pickedDonut, selectedDonut)) {\r\n                            selectedDonut.donutSprite.scale.setTo(1);\r\n                            selectedDonut = null;\r\n                        } else {\r\n                            if (areNext(pickedDonut, selectedDonut)) {\r\n                                selectedDonut.donutSprite.scale.setTo(1);\r\n                                swapDonut(selectedDonut, pickedDonut, true);\r\n                            } else {\r\n                                selectedDonut.donutSprite.scale.setTo(1);\r\n                                pickedDonut.donutSprite.scale.setTo(1.2);\r\n                                selectedDonut = pickedDonut;\r\n                                _this.input.addMoveCallback(donutMove);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function donutDeselect(e) {\r\n            _this.input.deleteMoveCallback(donutMove);\r\n        }\r\n\r\n        function donutMove(event, pX, pY) {\r\n            if (event.id == 0) {\r\n                let distX = pX - selectedDonut.donutSprite.x - moveX,\r\n                    distY = pY - selectedDonut.donutSprite.y - moveY,\r\n                    deltaRow = 0,\r\n                    deltaCol = 0;\r\n                if (Math.abs(distX) > donutSize / 2) {\r\n                    if (distX > 0) {\r\n                        deltaCol = 1;\r\n                    } else {\r\n                        deltaCol = -1;\r\n                    }\r\n                } else {\r\n                    if (Math.abs(distY) > donutSize / 2) {\r\n                        if (distY > 0) {\r\n                            deltaRow = 1;\r\n                        } else {\r\n                            deltaRow = -1;\r\n                        }\r\n                    }\r\n                } if (deltaRow + deltaCol != 0) {\r\n                    let pickedDonut = gemAt(getDonutRow(selectedDonut) + deltaRow, getDonutCol(selectedDonut) + deltaCol);\r\n                    if (pickedDonut != -1) {\r\n                        selectedDonut.donutSprite.scale.setTo(1);\r\n                        swapDonut(selectedDonut, pickedDonut, true);\r\n                        _this.input.deleteMoveCallback(donutMove);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function swapDonut(donut1, donut2, swapBack) {\r\n            canPick = false;\r\n            let fromColor = donut1.donutColor,\r\n                fromSprite = donut1.donutSprite,\r\n                toColor = donut2.donutColor,\r\n                toSprite = donut2.donutSprite;\r\n            gameArray[getDonutRow(donut1)][getDonutCol(donut1)].donutColor = toColor;\r\n            gameArray[getDonutRow(donut1)][getDonutCol(donut1)].donutSprite = toSprite;\r\n            gameArray[getDonutRow(donut2)][getDonutCol(donut2)].donutColor = fromColor;\r\n            gameArray[getDonutRow(donut2)][getDonutCol(donut2)].donutSprite = fromSprite;\r\n            let donut1Tween = _this.add.tween(gameArray[getDonutRow(donut1)][getDonutCol(donut1)].donutSprite).to({\r\n                x: getDonutCol(donut1) * donutSize + donutSize / 2,\r\n                y: getDonutRow(donut1) * donutSize + donutSize / 2\r\n            }, swapSpeed, Phaser.Easing.Linear.None, true);\r\n            let donut2Tween = _this.add.tween(gameArray[getDonutRow(donut2)][getDonutCol(donut2)].donutSprite).to({\r\n                x: getDonutCol(donut2) * donutSize + donutSize / 2,\r\n                y: getDonutRow(donut2) * donutSize + donutSize / 2\r\n            }, swapSpeed, Phaser.Easing.Linear.None, true);\r\n            donut2Tween.onComplete.add(function () {\r\n                if (!matchInBoard() && swapBack) {\r\n                    swapDonut(donut1, donut2, false);\r\n                } else {\r\n                    if (matchInBoard()) {\r\n                        handleMatches();\r\n                    } else {\r\n                        canPick = true;\r\n                        selectedDonut = null;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        function areNext(donut1, donut2) {\r\n            return Math.abs(getDonutRow(donut1) - getDonutRow(donut2)) + Math.abs(getDonutCol(donut1) - getDonutCol(donut2)) == 1;\r\n        }\r\n\r\n        function areTheSame(donut1, donut2) {\r\n            return getDonutRow(donut1) == getDonutRow(donut2) && getDonutCol(donut1) == getDonutCol(donut2);\r\n        }\r\n\r\n        function gemAt(row, col) {\r\n            if (row < 0 || row >= fieldSize || col < 0 || col >= fieldSize) {\r\n                return -1;\r\n            }\r\n            return gameArray[row][col];\r\n        }\r\n\r\n        function getDonutRow(donut) {\r\n            return Math.floor(donut.donutSprite.y / donutSize);\r\n        }\r\n\r\n        function getDonutCol(donut) {\r\n            return Math.floor(donut.donutSprite.x / donutSize);\r\n        }\r\n\r\n        function isHorizontalMatch(row, col) {\r\n            return gemAt(row, col).donutColor == gemAt(row, col - 1).donutColor && gemAt(row, col).donutColor == gemAt(row, col - 2).donutColor;\r\n        }\r\n\r\n        function isVerticalMatch(row, col) {\r\n            return gemAt(row, col).donutColor == gemAt(row - 1, col).donutColor && gemAt(row, col).donutColor == gemAt(row - 2, col).donutColor;\r\n        }\r\n\r\n        function isMatch(row, col) {\r\n            return isHorizontalMatch(row, col) || isVerticalMatch(row, col);\r\n        }\r\n\r\n        function matchInBoard() {\r\n            for (let i = 0; i < fieldSize; i++) {\r\n                for (let j = 0; j < fieldSize; j++) {\r\n                    if (isMatch(i, j)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            return false;\r\n        }\r\n\r\n        function handleMatches() {\r\n            removeMap = [];\r\n            for (let i = 0; i < fieldSize; i++) {\r\n                removeMap[i] = [];\r\n                for (let j = 0; j < fieldSize; j++) {\r\n                    removeMap[i].push(0);\r\n                }\r\n            }\r\n            handleHorizontalMatches();\r\n            handleVerticalMatches();\r\n            destroyDonut();\r\n        }\r\n\r\n        function handleVerticalMatches() {\r\n            for (let i = 0; i < fieldSize; i++) {\r\n                let colorStreak = 1,\r\n                    currentColor = -1,\r\n                    startStreak = 0;\r\n                for (let j = 0; j < fieldSize; j++) {\r\n                    if (gemAt(j, i).donutColor == currentColor) {\r\n                        colorStreak++;\r\n                    }\r\n                    if (gemAt(j, i).donutColor != currentColor || j == fieldSize - 1) {\r\n                        if (colorStreak >= 3) {\r\n                            collectScore(colorStreak);\r\n                            switch (colorStreak) {\r\n                                case 3: for (let k = 0; k < colorStreak; k++) {\r\n                                    removeMap[startStreak + k][i]++;\r\n                                } break;\r\n                                case 4: for (let k = 0; k < fieldSize; k++) {\r\n                                    removeMap[k][i]++;\r\n                                } break;\r\n                                default: for (let k = 0; k < fieldSize; k++) {\r\n                                    for (let l = 0; l < fieldSize; l++) {\r\n                                        if (gemAt(k, l).donutColor == currentColor) {\r\n                                            removeMap[k][l]++;\r\n                                        }\r\n                                    }\r\n                                } break;\r\n                            }\r\n                        }\r\n                        startStreak = j;\r\n                        colorStreak = 1;\r\n                        currentColor = gemAt(j, i).donutColor;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function handleHorizontalMatches() {\r\n            for (let i = 0; i < fieldSize; i++) {\r\n                let colorStreak = 1,\r\n                    currentColor = -1,\r\n                    startStreak = 0;\r\n                for (let j = 0; j < fieldSize; j++) {\r\n                    if (gemAt(i, j).donutColor == currentColor) {\r\n                        colorStreak++;\r\n                    }\r\n                    if (gemAt(i, j).donutColor != currentColor || j == fieldSize - 1) {\r\n                        if (colorStreak >= 3) {\r\n                            collectScore(colorStreak);\r\n                            switch (colorStreak) {\r\n                                case 3:\r\n                                    for (let k = 0; k < colorStreak; k++) {\r\n                                        removeMap[i][startStreak + k]++;\r\n                                    } break;\r\n                                case 4:\r\n                                    for (let k = 0; k < fieldSize; k++) {\r\n                                        removeMap[i][k]++;\r\n                                    } break;\r\n                                default:\r\n                                    for (let k = 0; k < fieldSize; k++) {\r\n                                        for (let l = 0; l < fieldSize; l++) {\r\n                                            if (gemAt(k, l).donutColor == currentColor) {\r\n                                                removeMap[k][l]++;\r\n                                            }\r\n                                        }\r\n                                    } break;\r\n                            }\r\n                        }\r\n                        startStreak = j;\r\n                        colorStreak = 1;\r\n                        currentColor = gemAt(i, j).donutColor;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function destroyDonut() {\r\n            let destroyed = 0;\r\n            for (let i = 0; i < fieldSize; i++) {\r\n                for (let j = 0; j < fieldSize; j++) {\r\n                    if (removeMap[i][j] > 0) {\r\n                        let destroyTween = _this.add.tween(gameArray[i][j].donutSprite).to({\r\n                            alpha: 0\r\n                        }, destroySpeed, Phaser.Easing.Linear.None, true);\r\n                        destroyed++;\r\n                        destroyTween.onComplete.add(function (donut) {\r\n                            donut.destroy();\r\n                            destroyed--;\r\n                            if (destroyed == 0) {\r\n                                makeDonutFall();\r\n                                if (fastFall) {\r\n                                    replenishField();\r\n                                }\r\n                            }\r\n                        });\r\n                        gameArray[i][j] = null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function makeDonutFall() {\r\n            let fallen = 0,\r\n                restart = false;\r\n            for (let i = fieldSize - 2; i >= 0; i--) {\r\n                for (let j = 0; j < fieldSize; j++) {\r\n                    if (gameArray[i][j] != null) {\r\n                        let fallTiles = holesBelow(i, j);\r\n                        if (fallTiles > 0) {\r\n                            if (!fastFall && fallTiles > 1) {\r\n                                fallTiles = 1;\r\n                                restart = true;\r\n                            }\r\n                            let donut2Tween = _this.add.tween(gameArray[i][j].donutSprite).to({\r\n                                y: gameArray[i][j].donutSprite.y + fallTiles * donutSize\r\n                            }, fallSpeed, Phaser.Easing.Linear.None, true);\r\n                            fallen++;\r\n                            donut2Tween.onComplete.add(function () {\r\n                                fallen--;\r\n                                if (fallen == 0) {\r\n                                    if (restart) {\r\n                                        makeDonutFall();\r\n                                    } else {\r\n                                        if (!fastFall) {\r\n                                            replenishField();\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n                            gameArray[i + fallTiles][j] = {\r\n                                donutSprite: gameArray[i][j].donutSprite,\r\n                                donutColor: gameArray[i][j].donutColor\r\n                            }\r\n                            gameArray[i][j] = null;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (fallen == 0) {\r\n                replenishField();\r\n            }\r\n        }\r\n\r\n        function replenishField() {\r\n            let replenished = 0,\r\n                restart = false;\r\n            for (let j = 0; j < fieldSize; j++) {\r\n                let emptySpots = holesInCol(j);\r\n                if (emptySpots > 0) {\r\n                    if (!fastFall && emptySpots > 1) {\r\n                        emptySpots = 1;\r\n                        restart = true;\r\n                    }\r\n                    for (let i = 0; i < emptySpots; i++) {\r\n                        let donut = _this.add.sprite(donutSize * j + donutSize / 2, -(donutSize * (emptySpots - 1 - i) + donutSize / 2), 'donuts');\r\n                        donut.anchor.set(0.5);\r\n                        donutGroup.add(donut);\r\n                        let randomColor = _this.rnd.between(0, donutColors - 1);\r\n                        donut.frame = randomColor;\r\n                        gameArray[i][j] = {\r\n                            donutColor: randomColor,\r\n                            donutSprite: donut\r\n                        }\r\n                        let donut2Tween = _this.add.tween(gameArray[i][j].donutSprite).to({\r\n                            y: donutSize * i + donutSize / 2\r\n                        }, fallSpeed, Phaser.Easing.Linear.None, true);\r\n                        replenished++;\r\n                        donut2Tween.onComplete.add(function () {\r\n                            replenished--;\r\n                            if (replenished == 0) {\r\n                                if (restart) {\r\n                                    makeDonutFall();\r\n                                } else {\r\n                                    if (matchInBoard()) {\r\n                                        _this.time.events.add(250, handleMatches);\r\n                                    } else {\r\n                                        canPick = true;\r\n                                        selectedDonut = null;\r\n                                        count++;\r\n                                        if(count <= 3){\r\n                                            showHint();\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function holesBelow(row, col) {\r\n            let result = 0;\r\n            for (let i = row + 1; i < fieldSize; i++) {\r\n                if (gameArray[i][col] == null) {\r\n                    result++;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function holesInCol(col) {\r\n            let result = 0;\r\n            for (let i = 0; i < fieldSize; i++) {\r\n                if (gameArray[i][col] == null) {\r\n                    result++;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        canPick = true;\r\n        createField();\r\n        showHint();\r\n        this.input.onDown.add(donutSelect);\r\n        this.input.onUp.add(donutDeselect);\r\n    }\r\n\r\n    update() {\r\n        let _this = this;\r\n        if (_this.timeElapsed >= _this.totalTime) {\r\n            this.state.start('GameOver');\r\n        }\r\n    }\r\n\r\n    createTimer() {\r\n        let _this = this;\r\n        _this.timeLabel = _this.add.text(75, 75, \"00:00\", { font: \"72px Fredoka One\", fill: \"#9fbdf1\" });\r\n    }\r\n    updateTimer() {\r\n        let _this = this;\r\n        let currentTime = new Date();\r\n        let timeDifference = _this.startTime.getTime() - currentTime.getTime();\r\n        _this.timeElapsed = Math.abs(timeDifference / 1000);\r\n        let timeRemaining = _this.totalTime - _this.timeElapsed;\r\n        let minutes = Math.floor(timeRemaining / 60);\r\n        let seconds = Math.floor(timeRemaining) - (60 * minutes);\r\n        let result = (minutes < 10) ? \"0\" + minutes : minutes;\r\n        result += (seconds < 10) ? \":0\" + seconds : \":\" + seconds;\r\n        _this.timeLabel.text = result;\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default GamePlayGame;"
  ]
}